/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl1.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import lightweightDSL.App
import java.net.Authenticator
import org.eclipse.emf.common.util.EList
import lightweightDSL.FactorValue
import lightweightDSL.LEVEL
import java.util.logging.Level
import lightweightDSL.Factor
import lightweightDSL.Registration
import lightweightDSL.impl.RegistrationImpl
import lightweightDSL.Provider
import lightweightDSL.Login
import lightweightDSL.SFA
import javax.print.attribute.Attribute

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LightweightGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

		
	val app = resource.contents.head as App
		
		app.assignAuthenticator 
		app.assignMethod
		
	}
	
	def assignAuthenticator(App app) {
		for(auth : app.authenticators) {
			
		}
		
	}
	
	def assignMethod(App app) {
		for(phase : app.phases) {
			switch(phase.class.name) {
				case "Registration" : {
					val r = phase as Registration
					
					for(credential : r.credentials)
					if(credential.verifmethod.uniqueness && 
						credential.verifmethod.validity && 
						credential.verifmethod.bindings ) {
						phase.level = LEVEL.LOW
						println("Risk level for fraudulent enrollment is LOW or Inexistant all requirements are satisfied")
						
					} else if (!credential.verifmethod.uniqueness || 
						!credential.verifmethod.validity || 
						!credential.verifmethod.bindings) {
							phase.level = LEVEL.MEDIUM
							println("Risk level for fraudulent enrollment is MEDIUM because on the property are not ensured")

						} else {
							if(credential.provider == Provider.ID_P) {
								phase.level = LEVEL.MEDIUM
								println("Risk level for fraudulent enrollment is MEDIUM since the IdP may be voiolated")
								
							} else {
								phase.level = LEVEL.HIGH
								println("Risk level for fraudulent enrollment is HIGH because of absence of verification method")
								
							}
						}
				}
				
				case "Login" : {
					val l = phase as Login 
					// is persisted session exist or authofill form ==> eval = Medium
					for(auth : l.authMethods) {
						
					}
						
				}
				
				case "Reset" : {
					
				}
				
				case "Recovery" : {
					
				}
				
				
			}
		}
	}
}
