// automatically generated by Xtext
grammar org.xtext.example.mydsl1.Lightweight with org.eclipse.xtext.common.Terminals

import "platform:/resource/lightweightDSL/model/lightweightDSL.ecore"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

App returns App:
	'App' ":"
	'{'
		'Authenticators' ":" '[' authenticators+=Authenticator ( "," authenticators+=Authenticator)* ']' ","
		
		'Authentications' ":" '[' authMethods+=AuthMethod ( "," authMethods+=AuthMethod)* ']' ","

		'Procedures' ":" '[' phases+=Phase ( "," phases+=Phase)* ']' 
	'}';

AuthMethod returns AuthMethod : 
	MFA | SFA ;
	
MFA returns MFA : 
	
	'2FA' ":"
	'{'
		'name' ":" name = EString ","		
		'authenticators' ":"  authenticators+=[Authenticator] "&" authenticators+=[Authenticator]+ ","?
		'correlation' ":" correlation?=EBoolean ","
		'validation' ":" validation = ValidationType
	'}'
	;
	
	SFA returns SFA : 
		'SFA'  ":"
		'{'
		'name' ":" name = EString ","
		'authenticator' ":"  authenticators+=[Authenticator] 
		'}'
	;
	
Authenticator returns Authenticator:
	Possession | Biometrics | Knowledge
;

Possession returns Possession : 
	'possession' ':'
	"{"
	'name' ":" name=EString ","
	'value' ":" value=PVALUE 
	"}"
;

Knowledge returns Knowledge :
	'knowledge' ':' '{' 
		'name' ":" name=EString ","
		'value' ":" value=KVALUE ","
		"limitedAttempts" ':' limitedAttempts?=EBoolean ","
		'autofillable' ":" autofilled?=EBoolean
		'}'
	
	;

Biometrics returns Biometrics : 
	'biometrics' ':'
	"{"
	'name' ":" name=EString ","
	'value' ":" value=BVALUE 
	"}"
;
	
Phase returns Phase:
	Registration | Recovery | Login | Reset;

enum LEVEL returns LEVEL:
				LOW = 'LOW' | MEDIUM = 'MEDIUM' | HIGH = 'HIGH';

EString returns ecore::EString:
	STRING | ID;

Registration returns Registration:
	'Registration' ":"
	'{'
		'name' ":" name=EString ","
		'credentials' ":"'[' credentials+=Credential ( "," credentials+=Credential)* ']' 
	'}';
	
Credential returns Credential:
	{Credential}
	'{'
		'name' ":" 	name=EString ","
		'provider' ":"provider=PROVIDER ","
		'type' ":"type=CredTYPE ","
		('verification' ":" verifmethod=VerifMethod )?
	'}';

VerifMethod returns VerifMethod:
	{VerifMethod} 
	'{'
	'validity' ":" validity = EBoolean ","
	'uniqueness' ":" uniqueness = EBoolean ","
	'bindings' ":"bindings = EBoolean 
	'}'
	;
Recovery returns Recovery:
	{Recovery}
	'Recovery' ":"
	'{'
		'name' ":" name = EString ","
		('authenticator' ":" authenticator = [Authenticator] ",")?
		('protocol' ":" protocol=Protocol)?
	'}';

Login returns Login:
	{Login}
	'Login' ":"
	'{'
		'name' ":" name = EString ","
		'persistedSession' ":" session = EBoolean ","
		'authentication' ":"  authMethods+=[AuthMethod] ("||" authMethods+=[AuthMethod])*		
	'}';


Reset returns Reset:
	{Reset}
	'Reset' ":" 
	'{'
		'name' ":" 	name=EString ","
		('authenticator' ":" authenticator = [Authenticator] ",")?
		'authentication' ":"  authMethods+=[AuthMethod] ("||" authMethods+=[AuthMethod])*	
	'}';



enum PROVIDER returns PROVIDER:
				IdP = "Identity provider" | SELF = "Self provided" | INSTITUTIONAL = "Institutional";

enum CredTYPE returns CredTYPE:
				DIGITAL = 'Digital' | PHYSICAL = 'Physical';



EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum Protocol returns Protocol:
				EBIA = 'Email-Based' | SMS_BASED = "MS-based" | LOCAL = "Local";
				

enum KVALUE returns KVALUE : 
					STBP = "High Entropy Text-Based Password" | 
					PASSPHRASE = "Pass phrase" |
					PREFERENCES = "Knowledge-based Preferences" |
					LTBP = "Low Entropy Text-Based Password" | 
					PIN = "Pin Code"
;

enum BVALUE returns BVALUE : 
				FINGERPRINT = "Fingerprint Recognition" | 
				IRIS = "Facial Recognition"
;

enum PVALUE returns PVALUE:
				TOKEN = "Hard Drive Token" | 
				DEVICE = "Physical device" 
				;
			
enum ValidationType returns ValidationType : 
	LOCAL = "local validation" | REMOTE = "Remote validation"
;
