/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl1.generator;

import com.google.common.base.Objects;
import lightweightDSL.App;
import lightweightDSL.AuthMethod;
import lightweightDSL.Authenticator;
import lightweightDSL.Credential;
import lightweightDSL.KVALUE;
import lightweightDSL.Knowledge;
import lightweightDSL.LEVEL;
import lightweightDSL.Login;
import lightweightDSL.PROVIDER;
import lightweightDSL.Phase;
import lightweightDSL.Provider;
import lightweightDSL.Registration;
import lightweightDSL.Risk;
import lightweightDSL.Utils;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class LightweightGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final App app = ((App) _head);
    this.initAuthenticator(app);
    this.initAuthentications(app);
    this.assignMethod(app);
  }
  
  public void initAuthenticator(final App app) {
    EList<Authenticator> _authenticators = app.getAuthenticators();
    for (final Authenticator auth : _authenticators) {
      String _type = auth.getType();
      if (_type != null) {
        switch (_type) {
          case Utils.POSSESSION:
            Risk _risk = auth.getRisk();
            _risk.setInstance(Utils.POSSESSION);
            Risk _risk_1 = auth.getRisk();
            _risk_1.setValue(LEVEL.MEDIUM);
            Risk _risk_2 = auth.getRisk();
            _risk_2.setMessage("Use of possession based authentication");
            Risk _risk_3 = auth.getRisk();
            _risk_3.setInformation("");
            break;
          case Utils.BIOMETRICS:
            Risk _risk_4 = auth.getRisk();
            _risk_4.setInstance(Utils.BIOMETRICS);
            Risk _risk_5 = auth.getRisk();
            _risk_5.setValue(LEVEL.LOW);
            Risk _risk_6 = auth.getRisk();
            _risk_6.setMessage("Use of biometrics based authenticator");
            Risk _risk_7 = auth.getRisk();
            _risk_7.setInformation("");
            break;
          case Utils.KNOWLEDGE:
            final Knowledge knowledgeAuth = ((Knowledge) auth);
            Risk _risk_8 = auth.getRisk();
            _risk_8.setInstance(Utils.KNOWLEDGE);
            KVALUE _value = knowledgeAuth.getValue();
            boolean _equals = Objects.equal(_value, KVALUE.PREFERENCES);
            if (_equals) {
              Risk _risk_9 = auth.getRisk();
              _risk_9.setValue(LEVEL.HIGH);
              Risk _risk_10 = auth.getRisk();
              String _name = auth.getName();
              String _plus = ("Use of preference based authentication " + _name);
              String _plus_1 = (_plus + "!");
              _risk_10.setMessage(_plus_1);
              Risk _risk_11 = auth.getRisk();
              _risk_11.setInformation("");
            } else {
              if ((Objects.equal(knowledgeAuth.getValue(), KVALUE.PIN) || Objects.equal(knowledgeAuth.getValue(), KVALUE.LTBP))) {
                Risk _risk_12 = auth.getRisk();
                _risk_12.setValue(LEVEL.MEDIUM);
                Risk _risk_13 = auth.getRisk();
                String _name_1 = auth.getName();
                String _plus_2 = ("Use of low security text based " + _name_1);
                String _plus_3 = (_plus_2 + "!");
                _risk_13.setMessage(_plus_3);
                Risk _risk_14 = auth.getRisk();
                _risk_14.setInformation("");
              } else {
                Risk _risk_15 = auth.getRisk();
                _risk_15.setValue(LEVEL.LOW);
                Risk _risk_16 = auth.getRisk();
                String _name_2 = auth.getName();
                String _plus_4 = ("Use of string text based authentication " + _name_2);
                String _plus_5 = (_plus_4 + "!");
                _risk_16.setMessage(_plus_5);
                Risk _risk_17 = auth.getRisk();
                _risk_17.setInformation("");
              }
            }
            if (((!knowledgeAuth.isLimitedAttempts()) || knowledgeAuth.isAutofilled())) {
              boolean _isAutofilled = knowledgeAuth.isAutofilled();
              if (_isAutofilled) {
                LEVEL _value_1 = auth.getRisk().getValue();
                boolean _lessThan = (_value_1.compareTo(LEVEL.MEDIUM) < 0);
                if (_lessThan) {
                  Risk _risk_18 = auth.getRisk();
                  _risk_18.setValue(LEVEL.MEDIUM);
                  auth.getRisk().getMessage().concat("\n The risk is rised because of the use of autofilled form considered as possession-based authentication");
                  Risk _risk_19 = auth.getRisk();
                  _risk_19.setInformation("");
                }
              } else {
                LEVEL _value_2 = auth.getRisk().getValue();
                boolean _equals_1 = Objects.equal(_value_2, LEVEL.MEDIUM);
                if (_equals_1) {
                  Risk _risk_20 = auth.getRisk();
                  _risk_20.setValue(LEVEL.HIGH);
                  auth.getRisk().getMessage().concat("\n The risk is raised because of the unlimited attemps");
                  Risk _risk_21 = auth.getRisk();
                  _risk_21.setInformation("");
                }
                LEVEL _value_3 = auth.getRisk().getValue();
                boolean _equals_2 = Objects.equal(_value_3, LEVEL.LOW);
                if (_equals_2) {
                  Risk _risk_22 = auth.getRisk();
                  _risk_22.setValue(LEVEL.MEDIUM);
                  auth.getRisk().getMessage().concat("\n The risk is raised because of the unlimited attemps");
                  Risk _risk_23 = auth.getRisk();
                  _risk_23.setInformation("");
                }
              }
            }
            break;
        }
      }
    }
  }
  
  public void initAuthentications(final App app) {
    EList<AuthMethod> _authMethods = app.getAuthMethods();
    for (final AuthMethod method : _authMethods) {
      String _type = method.getType();
      boolean _equals = Objects.equal(_type, Utils.SFA);
      if (_equals) {
        method.setRisk(method.getAuthenticators().get(0).getRisk());
      } else {
      }
    }
  }
  
  public void assignMethod(final App app) {
    InputOutput.<String>println("Initializing methods");
    EList<Phase> _phases = app.getPhases();
    for (final Phase phase : _phases) {
      String _type = phase.getType();
      if (_type != null) {
        switch (_type) {
          case Utils.REGISTRATION:
            final Registration r = ((Registration) phase);
            Risk _risk = phase.getRisk();
            _risk.setInstance(Utils.REGISTRATION);
            EList<Credential> _credentials = r.getCredentials();
            for (final Credential credential : _credentials) {
              {
                if ((((!credential.getVerifmethod().isUniqueness()) && 
                  (!credential.getVerifmethod().isValidity())) && 
                  (!credential.getVerifmethod().isBindings()))) {
                  Risk _risk_1 = credential.getRisk();
                  _risk_1.setValue(LEVEL.HIGH);
                  Risk _risk_2 = credential.getRisk();
                  String _name = credential.getName();
                  String _plus = (_name + " : No requirements are satisfied ");
                  _risk_2.setMessage(_plus);
                  Risk _risk_3 = credential.getRisk();
                  _risk_3.setInformation("");
                } else {
                  if ((((!credential.getVerifmethod().isUniqueness()) || 
                    (!credential.getVerifmethod().isValidity())) || 
                    (!credential.getVerifmethod().isBindings()))) {
                    Risk _risk_4 = credential.getRisk();
                    _risk_4.setValue(LEVEL.MEDIUM);
                    Risk _risk_5 = credential.getRisk();
                    String _name_1 = credential.getName();
                    String _plus_1 = (_name_1 + ": One or two requirements are unsatisfied");
                    _risk_5.setMessage(_plus_1);
                    Risk _risk_6 = credential.getRisk();
                    _risk_6.setInformation("");
                  } else {
                    Risk _risk_7 = credential.getRisk();
                    _risk_7.setValue(LEVEL.LOW);
                    Risk _risk_8 = credential.getRisk();
                    String _name_2 = credential.getName();
                    String _plus_2 = (_name_2 + " : All requirements are satisfied");
                    _risk_8.setMessage(_plus_2);
                    Risk _risk_9 = credential.getRisk();
                    _risk_9.setInformation("");
                  }
                }
                PROVIDER _provider = credential.getProvider();
                boolean _equals = Objects.equal(_provider, Provider.ID_P);
                if (_equals) {
                  LEVEL _value = credential.getRisk().getValue();
                  boolean _lessThan = (_value.compareTo(LEVEL.MEDIUM) < 0);
                  if (_lessThan) {
                    Risk _risk_10 = credential.getRisk();
                    _risk_10.setValue(LEVEL.MEDIUM);
                    Risk _risk_11 = credential.getRisk();
                    String _name_3 = credential.getName();
                    String _plus_3 = (_name_3 + " :Identity provider put the risk to MEDIUM");
                    _risk_11.setMessage(_plus_3);
                    Risk _risk_12 = credential.getRisk();
                    _risk_12.setInformation("");
                  } else {
                    Risk _risk_13 = credential.getRisk();
                    _risk_13.setInformation("");
                  }
                }
              }
            }
            app.setRegistration(((Registration) phase));
            break;
          case Utils.LOGIN:
            final Login login = ((Login) phase);
            break;
          case Utils.RESET:
            break;
          case Utils.RECOVERY:
            break;
        }
      }
    }
  }
}
